var resources,
    Q = require('q');
    
(function () {
    "use strict";
    
    var FoodLantern = null;
    
    resources = function () {
        
        var self = this,
            parentGame;
        
        this.Resource = require('../classes/foodlantern.resource');
        this.resources = {};
        
        FoodLantern = module.parent.parent.parent.exports;
                
        this.listAll = function () {
            var deferred = Q.defer(),
                result = [], i;
            
            for (i in self.resources) {
                result.push(self.resources[i]);
            }
            
            deferred.resolve(result);
            
            return deferred.promise;
        };
        
        this.setParent = function (parent) {
            parentGame = parent;
        };
        
        /***!Add an array of games
         *    addAll()
         * @params    (Array:resources)     The array of objects to use as bases for new games
         * @params    (Integer:index)       OPTIONAL Index of where to start processing at
         */
        this.loadAll = function (resources, index) {
            var deferred = Q.defer();

            // Set the index to the first if not provided
            index = index || 0;
            
            // If the index matches the lenth, there is no need to process
            if (index === resources.length) {
                deferred.resolve();
            } else {
                FoodLantern.notify('Loading resource ' + (index + 1) + ' of ' + resources.length);
                // Use the standard method to add a new game to the environment
                self.load(resources[index])
                    // Upon completing the adding of the game, add one to the index and run again
                    .then(function (resource) {
                        index += 1;
                        self.loadAll(resources, index)
                            .then(deferred.resolve);
                    }, console.log);
            }
            
            return deferred.promise;
        };
        
        this.load = function (resourceData) {
            var deferred = Q.defer(),
                newResource = new self.Resource(resourceData);

            self.resources[newResource._id] = newResource;
            FoodLantern.notify('Added resource ' + newResource.name + ' to game as ID: ' + newResource._id);
            if (parentGame.resources.indexOf(newResource._id) == -1) {
                parentGame.resources.push(newResource._id);
                parentGame.save()
                    .then(function () {
                        deferred.resolve(newResource);
                    });
            } else {
                deferred.resolve(newResource);
            }
            
            return deferred.promise;
        };
        
        this.findById = function (request_ids) {
            var deferred = Q.defer(),
                result = [], i;
            
            // Remove any white spaces and split the request string up into an array
            request_ids = request_ids.toString().replace(' ', '').split(',');
            
            // Loop over the existing resources to see if it matches anything in the array of request IDs
            for (i in self.resources) {
                if (request_ids.indexOf(self.resources[i]._id) >= 0) {
                    // Upon finding a match, add it to the result array
                    result.push(self.resources[i]);
                }
            }
            
            deferred.resolve(result);
            return deferred.promise;
        };
        
    };
    
    resources = new resources();

    module.parent.parent.parent.exports.MongoServer.addSchema('resource', {
        name:           String,
        description:    String,
        image_uri:      String
    });
    
}());

module.exports = resources;

