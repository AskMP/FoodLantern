var players,
    Q = require('q'),
    crypto = require('crypto'),
    gravatar = require('gravatar');
    
(function () {
    "use strict";
    
    var FoodLantern = null
    
    players = function () {
        
        var self = this;
        
        this.Player = require('../classes/foodlantern.player');
        
        this.initialize = function () {
            FoodLantern = module.parent.exports;
        };
        
        this.create = function (playerData) {
            var deferred = Q.defer();
            
            playerData = new self.Player(playerData);

            deferred.resolve(playerData);
            
            return deferred.promise;
        };
        
        this.captureByEmail = function (email) {
            var deferred = Q.defer();

            FoodLantern.MongoServer.models.player.findOne({"email": email}, function (err, playerData) {
                deferred.resolve(playerData);
            });
            
            return deferred.promise;
        };
        
        this.validateCredentials = function (email, password) {
            var deferred = Q.defer(),
                playerPassword = crypto.createHash('sha1'),
                player;
            
            self.captureByEmail(email)
                .then(function (playerData) {
                    if (playerData === null){
                        deferred.reject();
                    } else {
                        password = playerPassword.update(password);
                        if (playerData.password !== password.digest('hex')) {
                            deferred.reject();
                        } else {
                            deferred.resolve(playerData);
                        }
                    }
                });
            
            return deferred.promise;
        };
        
        this.createSession = function (request, player) {
            var deferred = Q.defer();

            if (player.password) {
                delete player.password;
            }
            if (player.is_admin === -1) {
                delete player.is_admin;
            }
            
            request.session.player = player;
            request.session.player.gravatar = gravatar.url(request.session.player.email, {s: 55, d: 'mm'});

            deferred.resolve(player);
            
            return deferred.promise;
        };
        
        this.createNew = function (playerData) {
            var deferred = Q.defer();

            playerData.password = crypto.createHash('sha1').update(playerData.password).digest('hex');

            self.create(playerData)
                .then(function (player) {
                    player.save()
                        .then(deferred.resolve, console.log);
                }, console.log);
            
            return deferred.promise;
            
        }
        
        this.initialize();
        
    };
    
    players = new players();
    
    // Create the new MongoServer Schema and Model based upong the player object structure
    module.parent.exports.MongoServer.addSchema('player', {
        given_name      : String,
        family_name     : String,
        email           : String,
        password        : String,
        status          : Number,
        is_admin        : Number,
        score           : Number,
        resources       :[Object]
    });
    
}());

module.exports = players;