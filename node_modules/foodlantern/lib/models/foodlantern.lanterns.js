var lanterns,
    Q = require('q');
    
(function () {
    "use strict";
    
    var FoodLantern = null;
    
    lanterns = function () {
        
        var self = this,
            parentGame = null;
        
        this.Lantern = require('../classes/foodlantern.lantern');
        
        this.parentGame = null;
        
        this.listAll = function (request, res) {
            var deferred = Q.defer();
            
            deferred.resolve(parentGame.lanterns);
            
            return deferred.promise;
        };
        
        this.setParent = function (parent) {
            parentGame = parent;
        };
        
        this.add = function (lanternData) {
            var deferred = Q.defer();

            parentGame.lanterns.push(new self.Lantern(lanternData));

            deferred.resolve();
            return deferred.promise;
        };
        
        this.findById = function  (request_id) {
            var deferred = Q.defer();
            
            deferred.resolve();
            return deferred.promise;
        };
        
        this.findByResource = function (resource_ids) {
            var deferred = Q.defer(),
                i, r, result = [];
            
            if (typeof resource_ids === 'string') {
                resource_ids = resource_ids.split(',');
            }
            
            for (i = 0; i < parentGame.lanterns; i += 1) {
                for (r = 0; r < parentGame.lanterns[i].resources[r].length; r += 1) {
                    if (resource_id.indexOf(parentGame.lanterns[i].resources[r])) {
                        result.push(parentGame.lanterns[i]);
                        break;
                    }
                }
            }
            
            deferred.resolve(result);
            
            return deferred.promise;
        };
        
        this.findByRange = function (request, res) {
            var deferred = Q.defer();
            
            
            return deferred.promise;
        };
        
        this.capture = function (request, res) {
            var deferred = Q.defer();
            
            
            return deferred.promise;
        };
        
    };
    
    lanterns = new lanterns();
    
    module.parent.parent.parent.exports.MongoServer.addSchema('lantern', {
        game_id         : String,        // The game the lantern is associated to
        uid             : String,        // Device unique identifier
        name            : String,        // Name given to device (for within app)
        description     : String,        // Description of the lantern
        notation        : String,        // Any tip that is associated to it such as location
        status          : Number,        // Current status of the lantern (occupied, available, disabled, etcâ€¦)
        occupant        : String,        // unique player MongoDB _id string or empty
        resources       : [String],
        geolocation     : {
            longitude       : Number,        // Location identifier
            latitude        : Number         // Location identifier
        }
    });
    
}());

module.exports = lanterns;