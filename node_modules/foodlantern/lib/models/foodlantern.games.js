var games,
    Q = require('q');

/***
 *!FoodLantern Games Model
 *
 * Performs actions and methods that pertain to games
 * within the node environment. The array of available
 * games is also stored within here.
 *
 *    Public Methods:
 *        listAll( )
 *        add( gameData )
 *        addAll( games [, index ] )
 *        findById( request_ids )
 *        findByDateRange( [ startDate [, endDate ]] )
 *        newGame( gameData )
 */
    
(function () {
    "use strict";
    
    // Setup the placeholder for the global
    var FoodLantern = null;
    
    games = function () {
        
        var self = this;
        
        // The object for each game
        this.Game = require('../classes/foodlantern.game');
        
        // The list of all the games within the environment
        this.games = {};
        
        // On loading of the method
        this.initialize = function () {
            FoodLantern = module.parent.exports;
        };
        
        /***!List all games
         *    listAll()
         * @return    (Array)        Loaded game objects or empty array
         */
        this.listAll = function () {
            var deferred = Q.defer(),
                result = [], i;
            
            for (i in self.games) {
                result.push(self.games[i]);
            }
            
            deferred.resolve(result);
            
            return deferred.promise;
        };
        
        /***!Add a game to the environment
         *    add()
         * @params    (Object:gameData)     The data to associate to the new game
         * @return    (Object)              The created game reference
         */
        this.load = function (gameData) {
            var deferred = Q.defer(),
                // Create the new game as a variable to the function
                game = new self.Game(gameData);

            game.loadRecipes()
                .then(game.loadLanterns, console.log)
                .then(game.loadResources, console.log)
                .then(function () {
                    self.games[game._id] = game;
                    deferred.resolve(game);
                });

            return deferred.promise;
        };
        
        this.leaveCurrent = function (player) {
            var deferred = Q.defer(),
                game;

            
            self.removePlayerFromGame(player, player.game)
                .then(function () {
                    deferred.resolve();
                });
            
            return deferred.promise;
        };
        
        this.removePlayerFromGame = function (player, game) {
            var deferred = Q.defer(),
                p, player, removePlayer;
            
            if (!game) {
                deferred.resolve();
            }
            
            game = self.findById(game);
            
            if (game.length === 0) {
                deferred.resolve();
            }
            
            game = game[0];
            
            if (game && game.players.indexOf(player._id) !== -1) {
                p = game.players.length;
                while (p) {
                    p -= 1;
                    
                    if (game.players[p] === player._id) {
                        removePlayer = game.players.splice(p, 1);
                    }
                }
                game.save()
                    .then(deferred.resolve);
            } else {
                deferred.resolve();
            }
            
            return deferred.promise;
        };
        
        this.join = function (player, game_id) {
            var deferred = Q.defer(),
                game = self.findById(game_id);
            
            if (game) {
                player.game = game_id;
                game[0].players.push(player._id);
                game[0].save()
                    .then(deferred.resolve);
                deferred.resolve();
            } else {
                deferred.reject('Invalid game id', 830);
            }
            
            return deferred.promise;
        };
        
        /***!Add an array of games
         *    addAll()
         * @params    (Array:games)         The array of objects to use as bases for new games
         * @params    (Integer:index)       OPTIONAL Index of where to start processing at
         */
        this.loadAll = function (games, index) {
            var deferred = Q.defer();

            // Set the index to the first if not provided
            index = index || 0;
            
            // If the index matches the lenth, there is no need to process
            if (index === games.length) {
                deferred.resolve();
            } else {
                FoodLantern.notify('Loading game ' + (index + 1) + ' of ' + games.length);
                // Use the standard method to add a new game to the environment
                self.load(games[index])
                    // Upon completing the adding of the game, add one to the index and run again
                    .then(function (game) {
                        index += 1;
                        console.log('Started game: ' + game.name + ' (' + game._id + ')');
                        return self.loadAll(games, index);
                    }, console.log);
            }
            
            return deferred.promise;
        };
        
        /***!Find a game via the ID string
         *    findById()
         * @params    (String:request_ids)    The MongoDB _id variable associated to the game.
         *                                    The string can contain multple IDs using comma seperation
         * @return    (Array)                 Returns an array of the ID(s) provided
         */
        this.findById = function (request_ids) {
            var result = [],
                i;
            
            request_ids = (typeof request_ids === 'string' && request_ids.trim() !== '') ? request_ids : '';

            // Remove any white spaces and split the request string up into an array
            request_ids = request_ids.toString().replace(' ', '').split(',');
            
            // Loop over the existing games to see if it matches anything in the array of request IDs
            for (i in self.games) {
                if (request_ids.indexOf(self.games[i]._id) >= 0) {
                    // Upon finding a match, add it to the result array
                    result.push(self.games[i]);
                }
            }
            
            // Alwyas return an array, even if empty
            return result;
        };
        
        /***!Capture games from the database within a time range
         *    captureByDateRange()
         * @params    (Integer:startDate)      OPTIONAL The integer of the start date requested (based upon UTC seconds, NOT milliseconds)
         * @params    (Integer:endDate)        OPTIONAL The integer of the end date requested (based upon UTC seconds, NOT milliseconds)
         * @return    (array)
         */
        this.captureByDateRange = function (startDate, endDate) {
            var deferred = Q.defer();
            
        /** Should do a proper check here instead **/
            // Set the default start and end dates if none provided
            startDate    = startDate    || new Date('2014-01-01').valueOf() / 1000;
            endDate        = endDate    || new Date('2015-01-01').valueOf() / 1000;
        /** Should do a proper check here instead **/
            
            // Do a search on the database for the date range
            FoodLantern.MongoServer.models.game.find()
                .where('date_start').lte(endDate) // Mongoose start date is less than or equal to end date
                .where('date_end').gte(startDate) // Mongoose end date is more than or equal to start date
                .exec()
                .then(function (games) {                
                    // return only an array
                    games = games || [];
                    
                    deferred.resolve(games);
                }, console.log);
            
            return deferred.promise;
        };
        
        /***!Create a new game
         *    newGame()
         * @params    (Object:gameData)        The base object data to create the game using
         */
        this.newGame = function (gameData) {
            var game, deferred = Q.defer();

            // Create a new game
            game = new self.Game(gameData);
            
            // If it doesn't already have an _id attribute, then save to generate it
            if (game._id === '') {
                game.save()
                    .then(self.add, console.log)
                    .then(deferred.resolve, console.log);
            }
            
            return deferred.promise;
        };
        
        // Upon loading of the model, run the initializer
        this.initialize();
        
    };
    
    // Create a new object of itself
    games = new games();
    
    // Create the new MongoServer Schema and Model based upong the game object structure
    module.parent.exports.MongoServer.addSchema('game', {
        name        : String,       // Name of the game or special event
        speed       : Number,       // The speed modifier in which to use for the resource collection (default: 1)
        distance    : Number,       // Distance modifier for resource capturing (default: 1)
        date_start  : Number,       // UTC of the start time (10 digit)
        date_end    : Number,       // UTC of the end time (10 digit)
        geofence    : {
            longitude   : Number,       // Location identifier
            latitude    : Number,       // Location identifier
            radius      : Number        // Location identifier
        },
        lanterns    : [String],     // Array of unique lantern MongoDB _id strings
        recipes     : [String],     // Array of unique recipe MongoDB _id strings
        resources   : [String],     // Array of unique resource MongoDB _id strings
        players     : [String],     // Array of unique player MongoDB _id strings (on-going)
        status      : Number        // Whether the game is active or inactive
    });
    
}());

module.exports = games;