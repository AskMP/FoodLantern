var games,
    Q = require('q');

/***
 *!FoodLantern Games Model
 *
 * Performs actions and methods that pertain to games
 * within the node environment. The array of available
 * games is also stored within here.
 *
 *    Public Methods:
 *        listAll( )
 *        add( gameData )
 *        addAll( games [, index ] )
 *        findById( request_ids )
 *        findByDateRange( [ startDate [, endDate ]] )
 *        newGame( gameData )
 */
    
(function () {
    "use strict";
    
    // Setup the placeholder for the global
    var FoodLantern = null;
    
    games = function () {
        
        var self = this;
        
        // The object for each game
        this.Game = require('../classes/foodlantern.game');
        
        // The list of all the games within the environment
        this.games = [];
        
        // On loading of the method
        this.initialize = function () {
            FoodLantern = module.parent.exports;
        };
        
        /***!List all games
         *    listAll()
         * @return    (Array)        Loaded game objects or empty array
         */
        this.listAll = function () {
            return self.games;
        };
        
        /***!Add a game to the environment
         *    add()
         * @params    (Object:gameData)     The data to associate to the new game
         * @return    (Object)              The created game reference
         */
        this.add = function (gameData) {
            var deferred = Q.defer(),
                // Create the new game as a variable to the function
                game = new self.Game(gameData);
            
            // Add the game to the end of the game array
            self.games.push(game);

            // Return the game object
            deferred.resolve(game);

            return deferred.promise;
        };
        
        /***!Add an array of games
         *    addAll()
         * @params    (Array:games)         The array of objects to use as bases for new games
         * @params    (Integer:index)       OPTIONAL Index of where to start processing at
         */
        this.addAll = function (games, index) {
            var deferred = Q.defer();
            
            // Set the game to an emtpy array if it is not correct
            games = (FoodLantern.isArray(games)) ? games : [];
            
            // Set the index to the first if not provided
            index = index || 0;
            
            // If the index matches the lenth, there is no need to process
            if (index === games.length) {
                deferred.resolve();
            } else {

                // Use the standard method to add a new game to the environment
                self.add(games[index])
                    // Upon completing the adding of the game, add one to the index and run again
                    .then(function () {
                        index += 1;
                        return self.addAll(games, index);
                    }, console.log);
            }
            
            return deferred.promise;
        };
        
        /***!Find a game via the ID string
         *    findById()
         * @params    (String:request_ids)    The MongoDB _id variable associated to the game.
         *                                    The string can contain multple IDs using comma seperation
         * @return    (Array)                 Returns an array of the ID(s) provided
         */
        this.findById = function (request_ids) {
            var result = [],
                i;

            // Remove any white spaces and split the request string up into an array
            request_ids = request_ids.toString().replace(' ', '').split(',');
            
            // Loop over the existing games to see if it matches anything in the array of request IDs
            for (i = 0; i < self.games.length; i += 1) {
                if (request_id.indexOf(self.games[i]._id) >= 0) {
                    // Upon finding a match, add it to the result array
                    result.push(self.games[i]);
                }
            }
            
            // Alwyas return an array, even if empty
            return result;
        };
        
        /***!Capture games from the database within a time range
         *    captureByDateRange()
         * @params    (Integer:startDate)      OPTIONAL The integer of the start date requested (based upon UTC seconds, NOT milliseconds)
         * @params    (Integer:endDate)        OPTIONAL The integer of the end date requested (based upon UTC seconds, NOT milliseconds)
         * @return    (array)
         */
        this.captureByDateRange = function (startDate, endDate) {
            var deferred = Q.defer();
            
        /** Should do a proper check here instead **/
            // Set the default start and end dates if none provided
            startDate    = startDate    || new Date('2014-01-01').valueOf() / 1000;
            endDate        = endDate    || new Date('2015-01-01').valueOf() / 1000;
        /** Should do a proper check here instead **/
            
            // Do a search on the database for the date range
            FoodLantern.MongoServer.models.game.find()
                .where('date_start').lte(endDate) // Mongoose start date is less than or equal to end date
                .where('date_end').gte(startDate) // Mongoose end date is more than or equal to start date
                .exec()
                .then(function (games) {
                    // return only an array
                    games = games || [];
                    deferred.resolve(games);
                });
            
            return deferred.promise;
        };
        
        /***!Create a new game
         *    newGame()
         * @params    (Object:gameData)        The base object data to create the game using
         */
        this.newGame = function (gameData) {
            var game, deferred = Q.defer();

            // Create a new game
            game = new self.Game(gameData);
            
            // If it doesn't already have an _id attribute, then save to generate it
            if (game._id === '') {
                game.save()
                    .then(self.add, console.log);
            }
            
            return deferred.promise;
        };
        
        // Upon loading of the model, run the initializer
        this.initialize();
        
    };
    
    // Create a new object of itself
    games = new games();
    
}());

module.exports = games;