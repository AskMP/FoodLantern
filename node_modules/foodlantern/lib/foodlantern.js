
var FoodLantern = {},
    Q = require('q');

(function () {
    "use strict";
    
    FoodLantern = function () {
        
        var self = this;
        
        this.HTTPServer     = null;
        this.SocketServer   = null;
        this.MongoServer    = null;
        
        this.games          = null;
        this.players        = null;

        // Various shared settings for all the application endpoints
        this.settings       = {
            port    : 8080,    // Non-conflicting with the standard 80
            debug   : true,    // Whether to show console data
            speed   : 1,
            db      : 'FoodLantern',    // MongoDB database name
            secret  : 'h8trg0nn4h8',    // Session secret
            htdocs  : __dirname + '/../htdocs'    // The root directory of the htdocs
        };
        
        // This is 
        this.initialize = function (settings) {
            var i, deferred = Q.defer();
            settings = settings || {};
            for (i in settings) {
                if (settings.hasOwnProperty(i)) {
                    self.settings[i] = settings[i];
                }
            }
            
            // Start by setting up the database connection to MongoDB
            // This is setup first due to session data being required for the HTTP server setup
            self.MongoServer.initialize()
                // Initialize the HTTP server for all server communication
                .then(self.HTTPServer.initialize, console.log)
                // Setup the Socket.io server for any standard clients
                .then(self.SocketServer.initialize, console.log)
                // Load the routing documents for the request types
                .then(self.HTTPServer.loadRoutes, console.log)
                // Begin the HTTP Side of things for GET and POST communication
                .then(self.HTTPServer.beginRouter, console.log)
                // Setup the event listeners for the Socket Server
                .then(self.SocketServer.beginListeners, console.log)
                // Setup the models
                .then(self.loadModels, console.log)
                // Begin any games that are supposed to be active
                .then(self.loadGames, console.log)
                .then(function () {
                    deferred.resolve();    
                }, console.log);
            
            return deferred.promise;
        };
        
        // Only notify the console if the debug mode is enabled.
        this.notify = function (message) {
            if (!!self.settings.debug) {
                console.log(message);
            }
        };
        
        // Load the models that will handle the general methods and functions
        this.loadModels = function () {
            var deferred = Q.defer();
            
            self.notify('Loading Models');
            
            // Game requests and navigation
            self.games = require('./models/foodlantern.games');
            
            // Player logic and control
            self.players = require('./models/foodlantern.players');
            
            deferred.resolve();
            
            return deferred.promise;
        }
        
        // Perform a load of all the games into the server instance
        this.loadGames = function () {
            var deferred = Q.defer();
            
            self.notify('Loading existing games');
            
            // Capture games by date range where an empty call performs a default query
            self.games.captureByDateRange()
                // The returning value will always be an array item
                .then(function (games) {
                    // Add every game that was in the database within the timeline to the environment
                    self.games.addAll(games)
                        .then(function () {
                            // Check to see if there is any games in the environment
                            if (self.games.listAll().length === 0) {
                                // If there were no games in the environment on load, create a default one
                                self.games.newGame({
                                        name: 'Default',
                                        speed: 1,
                                        distance: 1,
                                        date_start: 1398902400,      // January 1st 2014
                                        date_end: 1419984000,        // January 1st 2015
                                        status: 1,
                                        players: [],
                                        recipes: [],
                                        lanterns: [],
                                        geofence: {
                                            latitude: 43.652698,    // Kensington Market latitude
                                            longitude: -79.401336,  // Kensington Market longitude
                                            radius: 0.2             // Fairly decent distance away, about the distance to Bloor
                                        }
                                })
                                .then(function () {
                                    deferred.resolve();
                                });
                            } else {
                                deferred.resolve();
                            }
                        }, console.log);
                }, console.log);
            
                
            return deferred.promise;
        };
        
        this.isArray = function (it) {
            return Object.prototype.toString.call(it) === '[object Function]';
        };
        
        this.isFunction = function (it) {
            return Object.prototype.toString.call(it) === '[object Array]';
        };
        
    };
    
    // Create the single object class as itâ€™s own variable
    FoodLantern = new FoodLantern();

    // Load the response class as it will be used for any API request structure
    FoodLantern.Response        = require('./classes/foodlantern.response');
    
    // Load the HTTP server as a pre-made variable, there is no need to use "new"
    FoodLantern.HTTPServer      = require('./foodlantern.httpserver');
    
    // Load the Socket server as a pre-made variable, there is no need to use "new"
    FoodLantern.SocketServer    = require('./foodlantern.socketserver');
    
    // Load the Mongo server as a pre-made variable, there is no need to use "new"
    FoodLantern.MongoServer     = require('./foodlantern.mongoserver');
    
}());

// Set the export to be only the global object
module.exports = FoodLantern;