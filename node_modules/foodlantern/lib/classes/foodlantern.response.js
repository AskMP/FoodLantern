var Response;

(function () {
    "use strict";
    
    Response = function (routerRequest, routerResponse) {
        
        var self = this,
            _response,
            _pretty = null,
            _callback = null;
    
        // Base meta information about the request
        this._meta = {
            datetime: null,    // UTC timecode of the request
            duration: null,    // Duration of the request in millliseconds
            request: '/'
        };

        this.result = [];
        
        this.initialize = function (routerRequest, routerResponse) {
            
            // No response variables will result in an error
            if (!routerResponse) {
                console.error('Invalid router response.');
            }
            
            // Seems backwards but will allow for less math required and object creation
            self._meta.duration = new Date().valueOf();
            
            // Datetime doesnâ€™t need milliseconds
            self._meta.datetime = Math.round(self._meta.duration / 100);
            
            self._meta.request = routerRequest.url.substr(4);
            
            // set the provate response variable to the router response for future use
            _response = routerResponse;

            // Capture the prettify query if submitted
            if (routerRequest.query.prettify) {
                _pretty = 4;
            }
            
            // Capture the callback query if submitted
            if (routerRequest.query.callback) {
                _callback = routerRequest.query.callback;
            }
        };
        
        this.render = function () {
            
            // Convert duration of the request to millisecond integer timeframe
            self._meta.duration = new Date().valueOf() - self._meta.duration;
            
            // write the header as JSON
            _response.type('application/json');
            
            // Enable callbacks for when they are requested
            if (_callback) {
                // Write the response as a JSON string
                _response.send(_callback + '(' + JSON.stringify(self, null, _pretty) + ')');

            } else {
                // Write the response as a JSON string
                _response.send(JSON.stringify(self, null, _pretty));
            }

        };
        
        this.errorResponse = function (errorStr, errorCode) {
            
            // Convert duration of the request to millisecond integer timeframe
            self._meta.duration = (new Date().valueOf() - self._meta.duration);
            
            // Change the response to be an error;
            self.response = { error : errorStr, code: errorCode };
                
            // write the header as JSON
            _response.type('application/json');

            // Enable callbacks for when they are requested
            if (_callback) {
                // Write the response as a JSON string
                _response.send(_callback + '(' + JSON.stringify(self, null, _pretty) + ')');

            } else {
                // Write the response as a JSON string
                _response.send(JSON.stringify(self, null, _pretty));
            }
            
        };

        // When a response is created, capture the HTTP response        
        this.initialize(routerRequest, routerResponse);
        
    };
    
    
}());

module.exports = Response;