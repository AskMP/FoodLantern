var Game,
    Q = require('q');

(function () {
    "use strict";
    
    var FoodLantern;
    
    Game = function (gameData) {
        
        var self = this;
        
        this._id        = '';
        this.name        = '';
        this.speed        = 1;
        this.distance    = 1;
        this.date_start    = 0;
        this.date_end    = 0;
        this.lanterns    = [];
        this.recipes    = [];
        this.players    = [];
        this.status        = 1;
        this.geofence    = {
            longitude    : 0,
            latitude    : 0,
            radius        : 0
        };
        
        // Create a new game from the information passed to the creator
        this.initialize = function (gameData) {

            // Ensure that the gameData is an object if it's null
            gameData = gameData || {};
            
            // Setting the link to the global
            FoodLantern = module.parent.parent.exports;
            
            // Creating a proper object from any MongoDB documents provided
            gameData = JSON.parse(JSON.stringify(gameData));
            
//            self._lanterns    = require('../models/foodlantern.lanterns');
//            self.players      = require('../methods/foodlantern.players');

            // Loop through the game data and the self to ensure only appropriate valies are replaced
            for (var d in gameData) {
                if (gameData.hasOwnProperty(d) && self.hasOwnProperty(d)) {
                    self[d] = gameData[d];
                }
            }
            
            // Return myself
            return self;
        };
        
        // Load any existing lanterns
        this.loadLanterns = function () {
            var deferred = Q.defer();

            // Search the database for any lanterns with the same game_id reference as this game
            FoodLantern.MongoServer.lantern.find({game_id: self._id}).exec()
                .then(function (err, lanterns) {
                    if (err) {
                        deferred.reject(err);
                    } else {

                        // For each lantern found, add it to the lantern array
                        for (var i = 0; i < lanterns.length; i += 1) {
                            self.lanterns.add(lanterns[i]);
                        }
                        
                        // Return when completed
                        deferred.resolve();

                    }

                }, console.log);
            
            return deferred.promise;
        };
        
        /***!Save the game to the database
         *  save()
         * Saves the game data to the database or creates a new
         * record based on whether the _id has been set or not.
         */
        this.save = function () {
            var deferred = Q.defer(),
            
            // Set the data to specific things in case the person added some fake variables
            newData = {
                name        : self.name,
                speed       : self.speed,
                distance    : self.distance,
                date_start  : self.date_start,
                date_end    : self.date_end,
                geofence    : {
                    longitude   : self.geofence.longitude,
                    latitude    : self.geofence.latitude,
                    radius      : self.geofence.radius
                },
                lanterns    : self.lanterns,
                recipes     : self.recipes,
                players     : self.players,
                status      : self.status
            };
            
            // Check to see if the MongoDB ID has been set or not
            if (self._id === '') {
                
                // Create a new record via the Mongo Schema / Model
                FoodLantern.MongoServer.models.game.create(newData, function (err, newGame) {
                    if (err) {
                        console.log(err);
                    } else {
                        // Set the ID to the newly created one
                        self._id = newGame._id;
                    }
                    
                    // return the game data
                    deferred.resolve(self);
                    
                });
            } else {

                // Update the player data using the ID
                FoodLantern.MongoServer.models.game.update({_id: self._id}, { $set: newData }, function (err, numberAffected, raw) {
                    if (err) {
                        console.log(err);
                    }

                    // return the game data
                    deferred.resolve(self);
                }, console.log);
            }
            
            return deferred.promise;
            
        };

        this.initialize(gameData);
        
    };
    
}());

module.exports = Game;