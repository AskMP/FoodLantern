/*jslint nomen: true */
/*globals require, module, console*/
var Player,
    Q = require('q');

(function () {
    "use strict";
    
    var FoodLantern; // Global object assigned to the prime
    
    Player = function (playerData) {
        
        var self        = this,
            socket      = null,
            socketID    = null;
        
        this._id            = "";
        this.given_name     = "";
        this.family_name    = "";
        this.email          = "";
        this.password       = null;
        this.status         = 1;
        this.is_admin       = -1;
        this.resources      = [];
        this.score          = 0;
        
        // Create a new player from the information passed to the creator
        this.initialize = function (playerData) {
            
            // Ensure that the playerData is an object if it's null
            playerData = playerData || {};

            // Setting the link to the global
            FoodLantern = module.parent.parent.exports;
            
            // Creating a proper object from any MongoDB documents provided
            playerData = JSON.parse(JSON.stringify(playerData));
            
            // Loop through the player data and the self to ensure only appropriate valies are replaced
            for (var d in playerData) {
                if (playerData.hasOwnProperty(d) && self.hasOwnProperty(d)) {
                    self[d] = playerData[d];
                }
            }
            
            // Return myself
            return self;
            
        };
        
        /***!Save the player to the database
         *  save()
         * Saves the current player data to the database or creates a new
         * record based on whether the _id has been set or not.
         */
        this.save = function () {
            var deferred = Q.defer(),
            
                // Set the data to specific things in case the person added some fake variables
                newData = {
                    given_name      : self.given_name,
                    family_name     : self.family_name,
                    email           : self.email,
                    status          : self.status,
                    is_admin        : self.is_admin,
                    score           : self.score,
                    resources       : self.resources
                },
                condition = (self._id === '') ? {email:'Nope!'} : {_id: self._id};
                
                // Update the player data using the ID
                FoodLantern.MongoServer.models.player.update(condition, { $set : newData }, {upsert: true}, function (err, numberAffected, raw) {
                    if (err) {
                        console.log('Error Updating Player');
                        console.log(err);
                        deferred.reject(err);
                    } else {
                        if (raw.updatedExisting === false) {
                            self._id = raw.upserted[0]._id;
                        }
                        // return the player data
                        deferred.resolve(self);
                    }

                }, console.log);
                
/*             } */
            
            return deferred.promise;
        };
        
        this.initialize(playerData);
        
    };
    
}());

module.exports = Player;