/*jslint nomen: true, es5: true */
/*globals require, module, console, __dirname*/
var HTTPServer,
    Q                = require('q'),
    express          = require('express'),
    engines          = require('consolidate'),
    connect          = require('connect'),
    session          = require('express-session'),
    MongoStore       = require('connect-mongo')(session),
    cookieParser     = require('cookie-parser'),
    bodyParser       = require('body-parser'),
    serveStatic      = require('serve-static'),
    http             = require('http'),
    fs               = require('fs');

(function () {
    "use strict";
    
    var FoodLantern = null;
    
    HTTPServer = function (settings) {
        
        var self    = this;

        this.requests    = null;
        
        this.router = null;
        
        this.Response = null;
        
        this.initialize = function () {
            var deferred = Q.defer();
            
            // Set the local private variable to the global parent module
            FoodLantern = module.parent.exports;

            // Notify the system that the initializing is taking place
            FoodLantern.notify('Initializing the HTTP Server');
            
            self.Response = require('./classes/foodlantern.response');
            
            // Use express as the primary router service
            self.router = express();
            
            // Use the Hogan templating engine (up for changing but trying it out)
            self.router.engine('html', require('hogan-express'));
                        
            // There are some sites that are router specific and loaded as views
            self.router.set('views', FoodLantern.settings.htdocs + '/views');
            self.router.set('view engine', 'html');
            self.router.set('layout', FoodLantern.settings.htdocs + '/layouts/default_layout');
            
            // For some files, like the base index, there is only a static website
            self.router.use(serveStatic(FoodLantern.settings.htdocs));
            
            // Enable parsing cookies for session storage
            self.router.use(cookieParser());
            
            // Enable parsing GET and POST variables
            self.router.use(bodyParser());
            
            // Use MongoDB for session storage
            self.router.use(session({
                store: new MongoStore({
                    db: FoodLantern.settings.db
                }),
                secret: FoodLantern.settings.secret
            }));
            
            // Create the request server using the router
            self.requests = http.createServer(self.router);
            
            // Listen for requests on the port number assigned in the global parent
            self.requests = self.requests.listen(FoodLantern.settings.port);
            
            deferred.resolve();
            return deferred.promise;
        };
        
        this.defaultgame = function () {
            if (Array.keys(self.games).length !== 0) {
                return self.games[Array.keys(self.games)[0]];
            } else {
                return null;
            }
        };
        
        this.beginRouter = function () {
            var deferred = Q.defer();
            
            /***
             * HTTP based URLs
             */
            self.router.get('/', self.primaryIndex);
            self.router.get('/login', self.login);
            self.router.post('/login', self.loginAttempt);
            self.router.all('/logout', self.logout);
            self.router.get('/register', self.register);
            self.router.post('/register', self.registerAttempt);
            self.router.get('/dashboard', self.dashboard);
            
            /***
             * API based URLs
             */
            
            // Get either the list or details of the games
            self.router.get('/api/games/:_id?', function (request, response) {
                response = new self.Response(request, response);
                if (request.params._id) {
                    response.result = FoodLantern.games.findById(request.params._id);
                } else {
                    response.result = FoodLantern.games.listAll();
                }
                
                response.render();
            });
            
            // Player based routers
            // NOTE: Completely insecure! Never do this style in production
            self.router.all('/api/players/login', function (request, response) {
                response = new self.Response(request, response);
                
                FoodLantern.players.validateCredentials(request.body.email, request.body.password)
                    .then(function (validPlayer) {
                        delete validPlayer.password;
                        if (validPlayer.is_admin === -1) {
                            delete validPlayer.is_admin;
                        }
    					FoodLantern.players.create(validPlayer)
    					    .then(function (player) {
        					    FoodLantern.players.createSession(request, player)
        					        .then(function (player) {
            					        response.result = player;
                                        response.render();
        					        });
        					    
    					    });
                    }, function () {
                        response.errorResponse('Invalid credentials', 801);
                    });
            });
            
            self.router.all('/api/players/logout', function (request, response) {
                response = new self.Response(request, response);
                
                delete request.session.player;
                response.result = true;
                response.render();
            });
            
            deferred.resolve();
            
            return deferred.promise;
        };
        
        this.primaryIndex = function (request, response) {

            var data = {
                player  : request.session.player,
                loginError    : request.session.loginError
            };
            
            self.router.set('partials', {body: "documentation"});            
            response.render('documentation', data);
        };
        
        this.login = function (request, response) {

            var data = {
                player  : request.session.player,
                loginError    : request.session.loginError,
                postTo        : 'login'
            };
            
            delete request.session.loginError;
            
            self.router.set('partials', {body: "login"});
            response.render('login', data);
        };
        
        this.logout = function (request, response) {
            delete request.session.player;
            
            response.location('/dashboard');
			response.redirect('/dashboard');
        };
        
        this.register = function (request, response) {
            
            var data = {
                player  : request.session.player,
                loginError    : request.session.loginError,
                postTo        : 'register'
            };
            
            delete request.session.loginError;
            
            self.router.set('partials', {body: "register"});
            response.render('register', data);
            
        };
        
        this.dashboard = function (request, response) {
            
            if (!request.session.player) {
                response.location('/login');
    			response.redirect('/login');
            }
            
            var data = {
                player  : request.session.player
            }
            
            self.router.set('partials', {body: "dashboard"});
            response.render('dashboard', data);
            
        };
        
        this.loginAttempt = function (request, response) {
            var validPlayer = false;
            
            FoodLantern.players.validateCredentials(request.body.email, request.body.password)
                .then(function (validPlayer) {
                    delete validPlayer.password;
					FoodLantern.players.create(validPlayer)
					    .then(function (player){
					        return FoodLantern.players.createSession(request, player);
                        }, console.log)
                        .then(function (player) {
					        FoodLantern.notify('Logging in ' + request.session.player.email);
							response.location('/dashboard');
							response.redirect('/dashboard');
				        }, console.log);
                }, function () {
                    request.session.loginError = 'Invalid username or password';
                    FoodLantern.notify('Error logging somebody in with the email ' + request.body.email);
                    response.location('/login');
					response.redirect('/login');
                });
            
        };
        
        this.registerAttempt = function (request, response) {
            if (request.body.email.toString() === '' || request.body.password.toString() === '') {
                FoodLantern.notify('missing elements');
                request.session.loginError = 'You need to provide both an email address and password.';
				response.location('/register');
				response.redirect('/register');
            } else {
                FoodLantern.players.captureByEmail(request.body.email)
                    .then(function (playerData) {
                        FoodLantern.notify('finding exiting players');
                        if (playerData) {
                            request.session.loginError = 'There is already a registration with that email.';
    						response.location('/register');
            				response.redirect('/register');
                        } else {
                            playerData = {
        					    given_name : request.body.given_name,
        					    family_name: request.body.family_name,
        					    email: request.body.email,
        					    password: request.body.password
        				    };
				    
        				    FoodLantern.players.createNew(playerData)
        			            .then(function (player) {
        			                FoodLantern.players.createSession(request, player)
        				                .then(function (player) {
            				                FoodLantern.notify('Player created, redirecting to dashboard');
            						        response.location('/dashboard');
                							response.redirect('/dashboard');
            					        }, console.log);
        			            }, console.log);
                        }
                    }, console.log);
            }
        };
    };
    
    HTTPServer = new HTTPServer();
    
}());

module.exports = HTTPServer;