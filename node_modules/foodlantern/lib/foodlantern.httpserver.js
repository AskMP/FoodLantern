/*jslint nomen: true, es5: true */
/*globals require, module, console, __dirname*/
var HTTPServer,
    Q                = require('q'),
    express          = require('express'),
    session          = require('express-session'),
    MongoStore       = require('connect-mongo')(session),
    cookieParser     = require('cookie-parser'),
    bodyParser       = require('body-parser'),
    serveStatic      = require('serve-static'),
    http             = require('http'),
    cors             = require('cors');

(function () {
    "use strict";
    
    var FoodLantern = null;
    
    HTTPServer = function (settings) {
        
        var self        = this;

        this.requests   = null;
        
        this.router     = null;
        
        this.routes     = {};
        
        this.initialize = function () {
            var deferred = Q.defer();
            
            // Set the local private variable to the global parent module
            FoodLantern = module.parent.exports;

            // Notify the system that the initializing is taking place
            FoodLantern.notify('Initializing the HTTP Server');
            
            // Use express as the primary router service
            self.router = express();
            
            // Use the Hogan templating engine (up for changing but trying it out)
            self.router.engine('html', require('hogan-express'));
                        
            // There are some sites that are router specific and loaded as views
            self.router.set('views', FoodLantern.settings.htdocs + '/views');
            self.router.set('view engine', 'html');
            self.router.set('layout', FoodLantern.settings.htdocs + '/layouts/default_layout');
            
            // For some files, like the base index, there is only a static website
            self.router.use(serveStatic(FoodLantern.settings.htdocs));
            
            // Enable parsing cookies for session storage
            self.router.use(cookieParser());
            
            // Enable parsing GET and POST variables
            self.router.use(bodyParser());
            
            self.router.use(cors());
            
            // Use MongoDB for session storage
            self.router.use(session({
                store: new MongoStore({
                    db: FoodLantern.settings.db
                }),
                secret: FoodLantern.settings.secret
            }));
            
            // Create the request server using the router
            self.requests = http.createServer(self.router);
            
            // Listen for requests on the port number assigned in the global parent
            self.requests = self.requests.listen(FoodLantern.settings.port);
            
            deferred.resolve();
            return deferred.promise;
        };
        
        this.defaultgame = function () {
            if (Array.keys(self.games).length !== 0) {
                return self.games[Array.keys(self.games)[0]];
            } else {
                return null;
            }
        };
        
        // Load the routes to be used for server requests
        this.loadRoutes = function () {
            var deferred = Q.defer();

            // HTTP based routes
            self.routes.http = require('./routes/foodlantern.routes.http');
            
            // API based routes
            self.routes.api = {
                games   : require('./routes/foodlantern.routes.api.games'),
                players : require('./routes/foodlantern.routes.api.players'),
                recipes : require('./routes/foodlantern.routes.api.recipes'),
                lanterns : require('./routes/foodlantern.routes.api.lanterns'),
                resources: require('./routes/foodlantern.routes.api.resources')
            };
            
            deferred.resolve();
            
            return deferred.promise;
        };
        
        this.beginRouter = function () {
            var deferred = Q.defer();
            
            // HTTP based URLs
            self.router.get('/',            self.routes.http.primaryIndex);
            self.router.get('/login',       self.routes.http.login);
            self.router.post('/login',      self.routes.http.loginAttempt);
            self.router.all('/logout',      self.routes.http.logout);
            self.router.get('/register',    self.routes.http.register);
            self.router.post('/register',   self.routes.http.registerAttempt);
            self.router.get('/dashboard',   self.routes.http.dashboard);
            
            // Must be registered user and an administrator
            self.router.get('/admin',       self.routes.http.admin);
            
            // Games
            self.router.get('/api/games',           self.routes.api.games.listActive);
            self.router.get('/api/games/:_id',      self.routes.api.games.getById);
            self.router.get('/api/games/join/:_id', self.routes.api.games.join);
            
            // Players
            self.router.all('/api/players/login',       self.routes.api.players.login);
            self.router.all('/api/players/logout',      self.routes.api.players.logout);
            self.router.all('/api/players/register',    self.routes.api.players.register);
            
            self.router.get('/api/recipes',             self.routes.api.recipes.listActive);
            self.router.get('/api/recipes/:_id',        self.routes.api.recipes.getById);
            
            self.router.get('/api/lanterns',            self.routes.api.lanterns.listActive);
            self.router.get('/api/lanterns/:_id',       self.routes.api.lanterns.getById);
            self.router.get('/api/lanterns/:_id/capture', self.routes.api.lanterns.capture);
            self.router.get('/api/lanterns/:_id/release', self.routes.api.lanterns.release);
            
            self.router.get('/api/resources',           self.routes.api.resources.listActive);
            self.router.get('/api/resources/:_id',      self.routes.api.resources.getById);
            
            deferred.resolve();
            
            return deferred.promise;
        };
    };
    
    HTTPServer = new HTTPServer();
    
}());

module.exports = HTTPServer;