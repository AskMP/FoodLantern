/*jslint nomen: true */
/*globals require, module, console*/
var Resource,
    Q = require('q');

(function () {
    "use strict";
    
    var Forage;
    
    Resource = function (resourceData) {
    
        resourceData = resourceData || {};
        
        var self = this;

        this._id            = '';
        this.name           = '';
        this.description    = '';
        this.image_url      = '';
        
        this.initialize = function (resourceData) {
        
            resourceData = resourceData || {};
            
            Forage = module.parent.parent.parent.exports;
            
            resourceData = JSON.parse(JSON.stringify(resourceData));
            
            for (var d in resourceData) {
                if (self.hasOwnProperty(d) && resourceData.hasOwnProperty(d)) {
                    self[d] = resourceData[d];
                }
            }

            return self;

        };
        
        this.save = function () {
            var deferred = Q.defer(),
            
                newData = {
                    name            : self.name,
                    description     : self.description,
                    image_url       : self.image_url,
                };
            
            if (self._id === '') {
                
                Forage.MongoServer.models.resource.create(newData, function (err, newResource) {
                    if (err) {
                        console.log(err)
                    } else {
                        self._id = newResource._id;
                    }
                    
                    deferred.resolve(self);
                    
                }, console.log);
                
            } else {
                
                Forage.MongoServer.models.resource.update({ _id : self._id }, { $set : newData }, function (err, numberAffected, raw) {
                    if (err) {
                        console.log(err);
                    }

                    // return the recipe data
                    deferred.resolve(self);

                }, console.log);
                
            }
            
            return deferred.promise;
        };
        
        this.initialize(resourceData);
    };
    
}());

module.exports = Resource;