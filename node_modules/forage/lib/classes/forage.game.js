var Game,
    Q = require('q');

(function () {
    "use strict";
    
    var Forage;
    
    Game = function (gameData) {
        
        var self = this,
            models = {
                recipes : null,
                lanterns: null
            };
        
        this._id        = '';
        this.name        = '';
        this.speed        = 1;
        this.distance    = 1;
        this.date_start    = 0;
        this.date_end    = 0;
        this.lanterns    = [];
        this.recipes    = [];
        this.resources  = [];
        this.players    = [];
        this.status        = 1;
        this.geofence    = {
            longitude    : 0,
            latitude    : 0,
            radius        : 0
        };
        
        // Create a new game from the information passed to the creator
        this.initialize = function (gameData) {

            // Ensure that the gameData is an object if it's null
            gameData = gameData || {};
            
            // Setting the link to the global
            Forage = module.parent.parent.parent.exports;
            
            // Creating a proper object from any MongoDB documents provided
            gameData = JSON.parse(JSON.stringify(gameData));

            Forage.notify('Initializing game ' + gameData.name);
            
            models.recipes    = require('../models/forage.recipes');
            models.recipes.setParent(self);
            models.lanterns   = require('../models/forage.lanterns');
            models.lanterns.setParent(self);
            models.resources  = require('../models/forage.resources');
            models.resources.setParent(self);
            
            // Loop through the game data and the self to ensure only appropriate valies are replaced
            for (var d in gameData) {
                if (gameData.hasOwnProperty(d) && self.hasOwnProperty(d)) {
                    self[d] = gameData[d];
                }
            }
            
            // Return myself
            return self;
        };
        
        this.listRecipes = function () {
            return models.recipes.listAll();
        };
        
        this.recipesById = function (id) {
            return models.recipes.findById(id);
        };
        
        this.listLanterns = function () {
            return models.lanterns.listAll();
        };
        
        this.lanternsById = function (id) {
            return models.lanterns.findById(id);
        };
        
        this.listResources = function () {
            return models.resources.listAll();
        };
        
        this.updateLanternStatus = function (id, newStatus, occupant) {
            if (models.lanterns.lanterns[id]) {
                models.lanterns.lanterns[id].status = newStatus;
                if (newStatus === 0) {
                    models.lanterns.lanterns[id].occupant = occupant;
                } else if (newStatus === 1) {
                    models.lanterns.lanterns[id].occupant = '';
                }
                return models.lanterns.lanterns[id];
            } else {
                return false;
            }
        };
        
        this.resourcesById = function (id) {
            return models.resources.findById(id)
        };
        
        // Load any existing lanterns
        this.loadLanterns = function () {
            var deferred = Q.defer();
            Forage.notify('Loading lanterns for game ' + self.name);
            // Search the database for any lanterns with the same game_id reference as this game
            Forage.MongoServer.models.lantern.find({game_id: self._id}, function (err, lanternList) {
                Forage.notify('Found ' + lanternList.length + ' lanterns for game ' + self.name);
                if (err) {
                    deferred.reject(err);
                } else {

                    models.lanterns.loadAll(lanternList)
                        .then(deferred.resolve);

                }
            });
            
            return deferred.promise;
        };
        
        this.loadRecipes = function () {
            var deferred = Q.defer();
            Forage.notify('Loading recipes for game ' + self.name);
            Forage.MongoServer.models.recipe.find({game_id: self._id}, function (err, recipeList) {
                Forage.notify('Found ' + recipeList.length + ' recipes for game ' + self.name);
                if (err) {
                    deferred.reject(err);
                } else {
                    models.recipes.loadAll(recipeList)
                        .then(function () {
                            Forage.notify('Finished loading ' + self.recipes.length + ' recipe(s) for game ' + self.name);
                            deferred.resolve();
                        }, console.log);
                }
            });
            return deferred.promise;
        };
        
        this.loadResources = function () {
            var deferred = Q.defer();
            Forage.notify('Loading all resource types');
            Forage.MongoServer.models.resource.find({}, function (err, resourceList) {
                Forage.notify('Found ' + resourceList.length + ' resource types on the server.');
                if (err) {
                    deferred.reject(err);
                } else {
                    models.resources.loadAll(resourceList)
                        .then(deferred.resolve);
                }
            });
            return deferred.promise;
        };
        
        /***!Save the game to the database
         *  save()
         * Saves the game data to the database or creates a new
         * record based on whether the _id has been set or not.
         */
        this.save = function () {
            var deferred = Q.defer(),
            
            // Set the data to specific things in case the person added some fake variables
            newData = {
                name        : self.name,
                speed       : self.speed,
                distance    : self.distance,
                date_start  : self.date_start,
                date_end    : self.date_end,
                geofence    : {
                    longitude   : self.geofence.longitude,
                    latitude    : self.geofence.latitude,
                    radius      : self.geofence.radius
                },
                lanterns    : self.lanterns,
                recipes     : self.recipes,
                resources   : self.resources,
                players     : self.players,
                status      : self.status
            };
            
            // Check to see if the MongoDB ID has been set or not
            if (self._id === '') {
                
                // Create a new record via the Mongo Schema / Model
                Forage.MongoServer.models.game.create(newData, function (err, newGame) {
                    if (err) {
                        console.log(err);
                    } else {
                        // Set the ID to the newly created one
                        self._id = newGame._id;
                    }
                    
                    // return the game data
                    deferred.resolve(self);
                    
                });
            } else {

                // Update the player data using the ID
                Forage.MongoServer.models.game.update({_id: self._id}, { $set: newData }, function (err, numberAffected, raw) {
                    if (err) {
                        console.log(err);
                    }

                    // return the game data
                    deferred.resolve(self);
                }, console.log);
            }
            
            return deferred.promise;
            
        };

        this.initialize(gameData);
        
    };
    
}());

module.exports = Game;