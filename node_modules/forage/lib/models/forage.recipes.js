var recipes,
    Q = require('q');
    
(function () {
    "use strict";
    
    var Forage = null;
    
    recipes = function () {
        
        var self = this,
            parentGame;
        
        this.Recipe = require('../classes/forage.recipe');
        this.recipes = {};
        
        Forage = module.parent.parent.parent.exports;
                
        this.listAll = function () {
            var deferred = Q.defer(),
                result = [], i;
            
            for (i in self.recipes) {
                result.push(self.recipes[i]);
            }
            
            deferred.resolve(result);
            
            return deferred.promise;
        };
        
        this.setParent = function (parent) {
            parentGame = parent;
        };
        
        /***!Add an array of games
         *    addAll()
         * @params    (Array:resources)     The array of objects to use as bases for new games
         * @params    (Integer:index)       OPTIONAL Index of where to start processing at
         */
        this.loadAll = function (recipes, index) {
            var deferred = Q.defer();

            // Set the index to the first if not provided
            index = index || 0;
            
            // If the index matches the lenth, there is no need to process
            if (index === recipes.length) {
                deferred.resolve();
            } else {
                Forage.notify('Loading recipe ' + (index + 1) + ' of ' + recipes.length);
                // Use the standard method to add a new game to the environment
                self.load(recipes[index])
                    // Upon completing the adding of the game, add one to the index and run again
                    .then(function () {
                        index += 1;
                        self.loadAll(recipes, index)
                            .then(deferred.resolve);
                    }, console.log);
            }
            
            return deferred.promise;
        };
        
        this.load = function (recipeData) {
            var deferred = Q.defer(),
                newRecipe = new self.Recipe(recipeData);

            self.recipes[newRecipe._id] = newRecipe;
            Forage.notify('Added recipe ' + newRecipe.name + ' to game as ID: ' + newRecipe._id);
            if (parentGame.recipes.indexOf(newRecipe._id) == -1) {
                parentGame.recipes.push(newRecipe._id);
                parentGame.save()
                    .then(function () {
                        deferred.resolve(newRecipe);
                    });
            } else {
                deferred.resolve(newRecipe);
            }
            
            return deferred.promise;
        };
        
        this.findById = function (request_ids) {
            var deferred = Q.defer(),
                result = [], i;
            
            // Remove any white spaces and split the request string up into an array
            request_ids = request_ids.toString().replace(' ', '').split(',');
            
            // Loop over the existing recipes to see if it matches anything in the array of request IDs
            for (i in self.recipes) {
                if (request_ids.indexOf(self.recipes[i]._id) >= 0) {
                    // Upon finding a match, add it to the result array
                    result.push(self.recipes[i]);
                }
            }
            
            deferred.resolve(result);
            return deferred.promise;
        };
        
    };
    
    recipes = new recipes();

    module.parent.parent.parent.exports.MongoServer.addSchema('recipe', {
        name:           String,
        game_id:        String,
        snippet:        String,
        description:    String,
        resources :     [String],
        image_uri:      String
    });
    
}());

module.exports = recipes;

