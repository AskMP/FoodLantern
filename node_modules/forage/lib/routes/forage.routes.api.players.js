var APIPlayersRoutes,
    Q           = require('q');

(function () {
    "use strict";
    
    // Setup a local variable for the Forage reference
    var Forage = null;
    
    APIPlayersRoutes = function () {
        
        // Setup the JSON response variable that will contain our class
        var JSONResponse = null;
        
        // Setup the local variable upon loading the module
        this.initialize = function () {
            
            // Need to go 2 levels up since this is a sub-module of the HTTPServer
            Forage = module.parent.parent.exports;
            
            // Stand-alone JSON response class
            JSONResponse = require('../classes/forage.response');
            
        };
        
        /***!Create a user session
         *  POST /api/players/login
         * @params  String:email    The email address of the player
         * @params  String:password The security measure used by the player
         *
         * @return  success:Object  The object of the player withough the password
         *                          Administrators will have an added attribute "is_admin" = 1
         * @return  fail:Object     An error string and code 801
         */
        this.login = function (request, response) {
            
            if (Object.keys(request.body).length === 0) {
                response = new JSONResponse(request, response);
                response.errorResponse('email and password fields must not be empty.', 802);
                return true;
            }
            if (Object.keys(request.body)[0].substr(0, 1) === '{') {
                request.body = JSON.parse(Object.keys(request.body)[0]);
            }
        
            // Create the response object
            response = new JSONResponse(request, response);
            
            // Verify the user credentials using the players model
            Forage.players.validateCredentials(request.body.email, request.body.password)

                // Valid credentials will continue through the first promise
                .then(function (validPlayer) {

                    // Remove the password variable for all cases
                    delete validPlayer.password;
                    
                    // Create the player object (used for future case where player is stored locally when over socket)
					Forage.players.create(validPlayer)
					    .then(function (player) {

					        // Create a player session using the player object
    					    Forage.players.createSession(request, player)
    					    
    					        // Return the player object as the result
    					        .then(function (player) {

        					        response.result = player;
                                    response.render();

    					        }, console.log);
    					    
					    }, console.log);

                // Upon failure to validate credentials, return an error JSON response
                }, function () {
                    response.errorResponse('Invalid credentials', 801);
                });
        }

        /***!Create a player session
         *  GET /api/players/logout
         * @return  success:Boolean true  
         */
        this.logout = function (request, response) {
            
            // Create the response object
            response = new JSONResponse(request, response);
            
            // Once we're storing the data locally within a "logged in players" array,
            // We'll have to place the removal here
            
            // Delete the session
            delete request.session.player;
            
            // Set the result to true meaning the player has logged out
            response.result = true;
            response.render();
        };
        
        /***!Register a new player
         *  POST /api/players/register
         * @params  String:email        The email address of the player
         * @params  String:password     The security measure used by the player
         * @params  String:given_name   OPTIONAL First name of the player
         * @params  String:family_name  OPTIONAL First name of the player
         *
         * @return  success:Object      The object of the player withough the password
         *                              Administrators will have an added attribute "is_admin" = 1
         *
         * @return  fail:Object         An error string and code associate to error
         */
        this.register = function (request, response) {
            
            if (Object.keys(request.body)[0].substr(0, 1) === '{') {
                request.body = JSON.parse(Object.keys(request.body)[0]);
            }
        
            var playerData;
            
            // Create the response object
            response = new JSONResponse(request, response);
            
            // Ensure that the email and password variables are not empty
            if (request.body.email.toString().trim() === '') {
                response.errorResponse('Email string cannot be empty', 810);
            } else  if (request.body.password.toString().trim() === '') {
                response.errorResponse('Password string cannot be empty', 811);
            } else {
            
                Forage.players.captureByEmail(request.body.email)
                    .then(function (playerData) {
                        if (playerData !== null) {
                            response.errorResponse('Email already registered', 812);
                        } else {
                            // Create the base player data object manually to ensure that no extra elements are submitted (like is_admin)
                            playerData = {
                			    given_name :    request.body.given_name,
                			    family_name:    request.body.family_name,
                			    email:          request.body.email,
                			    password:       request.body.password
                		    };
                		    
                		    // Create a new player using the data
                		    Forage.players.createNew(playerData)
            		        
            		        // Since when creating a new player, if there was no _id provided,
            		        // it saves you can move to the next step
            	            .then(function (player) {
            	                // Create a session for the new registered member
            	                console.log('Next step is creating session');
            	                Forage.players.createSession(request, player)
            	                
            	                    // Redirect the new member to their dashboard not thay they've logged in too
            		                .then(function (player) {
            		                    console.log('created session');
            		                    // Set the API result to the player data and output the JSON
            		                    response.result = player;
            		                    response.render();
            
            				        }, function (err) {
            				            console.log(err);
                				        response.errorResonse('Internal Server Error: ' + err, 800)
            				        });
            
                	            }, function (err) {
                		            console.log(err);
                			        response.errorResonse('Internal Server Error: ' + err, 800)
                		        });
                        }
                    });
		        }
	        };
        
        this.initialize();
        
    };
    
    APIPlayersRoutes = new APIPlayersRoutes();
    
}());

module.exports = APIPlayersRoutes;